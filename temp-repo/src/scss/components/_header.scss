@use 'sass:map';
@use 'src/scss/base' as *;

.header {
  $root: &;
  $padding-x: (
    sm: 30,
    md: 40,
    lg: 80,
    xl: 120);
  $padding-t: (
    sm: 54,
    md: 53,
    lg: 53,
    xl: 79);
  $padding-b: (
    sm: 41,
    md: 57,
    lg: 57,
    xl: 80);

  width: 100%;
  min-height: 100vh;
  padding-top: vh(map.get($padding-t, 'sm'), map.get($base-height, 'sm'));
  padding-bottom: vh(map.get($padding-b, 'sm'), map.get($base-height, 'sm'));

  @each $key in $medias {
    @include up($key) {
      padding-top: vh(map.get($padding-t, $key), map.get($base-height, $key));
      padding-bottom: vh(map.get($padding-b, $key), map.get($base-height, $key));
    }
  }

  &__inner {
    $gap-inner: (
      sm: 44,
      md: 82,
      lg: 61,
      xl: 103);

    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: space-between;
    gap: vh(map.get($gap-inner, 'sm'), map.get($base-height, 'sm'));

    @each $key, $value in $gap-inner {
      @include up($key) {
        gap: vh($value, map.get($base-height, $key));
      }
    }
  }

  &__title {
    $fs-title: (
      sm: 42,
      md: 42,
      lg: 56,
      xl: 85);

    line-height: normal;
    font-size: em(map.get($fs-title, 'sm'), map.get($fs-base, 'sm'));
    padding-left: em(map.get($padding-x, 'sm'), map.get($fs-title, 'sm'));
    padding-right: em(map.get($padding-x, 'sm'), map.get($fs-title, 'sm'));

    @each $key, $value in $fs-title {
      @include up($key) {
        font-size: em($value, map.get($fs-base, $key));
        padding-left: em(map.get($padding-x, $key), $value);
        padding-right: em(map.get($padding-x, $key), $value);
      }
    }
  }

  &__clients {
    position: relative;
    width: 100%;
  }

  &__client-list {
    $column-gap-list: (
      sm: 73,
      md: 141,
      lg: 151,
      xl: 170);
    $row-gap-list:  (
      sm: 30,
      md: 73,
      lg: 89,
      xl: 100);
    $padding-t-list: 20;

    display: grid;
    flex-wrap: wrap;
    width: fit-content;
    height: 100%;
    cursor: grab;
    grid-template-columns: repeat(3, auto);
    grid-template-rows: repeat(3, auto);
    column-gap: em(map.get($column-gap-list, 'sm'), map.get($fs-base, 'sm'));
    row-gap: vh(map.get($row-gap-list, 'sm'), map.get($base-height, 'sm'));
    padding-left: em(map.get($padding-x, 'sm'), map.get($fs-base, 'sm'));
    padding-right: em(map.get($padding-x, 'sm'), map.get($fs-base, 'sm'));

    &:active {
      cursor: grabbing;
    }

    @each $key, $value in $column-gap-list {
      @include up($key) {
        column-gap: em($value, map.get($fs-base, $key));
        row-gap: vh(map.get($row-gap-list, $key), map.get($base-height, $key));
        padding-left: em(map.get($padding-x, $key), map.get($fs-base, $key));
        padding-right: em(map.get($padding-x, $key), map.get($fs-base, $key));
        grid-template-columns: repeat(4, auto);
        grid-template-rows: repeat(2, auto);

        @if $key == 'sm' {
          grid-template-columns: repeat(3, auto);
          grid-template-rows: repeat(3, auto);
        }
      }
    }
  }

  .client {
    $fs-client: (
      sm: 13,
      md: 14,
      lg: 14,
      xl: 20);

    display: flex;
    flex-direction: column;
    pointer-events: none;
    user-select: none;
    align-items: center;
    font-size: em(map.get($fs-base, 'sm'), map.get($fs-base, 'sm'));
    gap: em(20, map.get($fs-base, 'sm'));

    @each $key, $value in $fs-client {
      @include up($key) {
        font-size: em($value, map.get($fs-base, $key));
        gap: em(51, $value);

        @if $key == 'sm' {
          gap: em(21, $value);
        }
      }
    }

    &__logo {
      $width-client:  (
        sm: 155,
        md: 300,
        lg: 300,
        xl: 360);
      $height-client: (
        sm: 61,
        md: 110,
        lg: 85,
        xl: 134);

      position: relative;
      display: flex;
      align-items: flex-end;
      justify-content: center;
      width: em(map.get($width-client, 'sm'), map.get($fs-client, 'sm'));
      height: vh(map.get($height-client, 'sm'), map.get($base-height, 'sm'));

      @each $key, $value in $width-client {
        @include up($key) {
          width: em($value, map.get($fs-client, $key));
          height: vh(map.get($height-client, $key), map.get($base-height, $key));

          @if $key == 'md' {
            height: em(map.get($height-client, $key), map.get($fs-client, $key));
          }
        }
      }

      &:after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 12;
      }
    }

    &__postscript {
      text-align: center;
      color: $color-gray-text;
      line-height: 125%;
      letter-spacing: 0.4px;
    }
  }

  &__bottom {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding-left: em(5, map.get($fs-base, 'sm'));
    padding-right: em(map.get($padding-x, 'sm'), map.get($fs-base, 'sm'));
    margin-top: 0;

    @each $key, $value in $fs-base {
      @include up($key) {
        padding-left: em(map.get($padding-x, $key), $value);
        padding-right: em(map.get($padding-x, $key), $value);
        margin-top: 0;

        @if $key == 'sm' {
          margin-top: em(15, $value);
        }
      }
    }
  }

  .header-popup {
    display: flex;
    justify-content: space-between;
    align-items: center;

    &__icon {
      width: em(66, map.get($fs-base, 'sm'));
      height: em(66, map.get($fs-base, 'sm'));

      @include up('lg') {
        width: em(84, map.get($fs-base, 'lg'));
        height: em(84, map.get($fs-base, 'lg'));
      }
    }

    &__message {
      $fs-message: (
        sm: 16,
        md: 16,
        lg: 16,
        xl: 22);
      $width-message: (
        sm: 233,
        md: 233,
        lg: 233,
        xl: 308);
      $height-message: (
        sm: 73,
        md: 73,
        lg: 73,
        xl: 93);
      $padding-message:(
        left: 18,
        bottom: 23,
        right: 17,
        top: 39);

      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;

      font-size: em(0.7 * map.get($fs-message, 'sm'), map.get($fs-base, 'sm'));
      width: em(map.get($width-message, 'sm'), map.get($fs-message, 'sm'));
      min-height: em(map.get($height-message, 'sm'), map.get($fs-message, 'sm'));
      border-radius: em(15, map.get($fs-message, 'sm'));

      @each $key, $value in $fs-message {
        @include up($key) {
          font-size: em($value, map.get($fs-base, $key));
          width: em(map.get($width-message, $key), $value);
          min-height: em(map.get($height-message, $key), $value);
          border-radius: em(15, $value);
        }
      }
    }

    &__bg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    &__text {
      width: fit-content;
      text-align: center;
      color: $color-bg;
      line-height: 130%;
    }
  }
}
